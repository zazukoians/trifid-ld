@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix s: <http://schema.org/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix zzm: <http://zz2h.zazukoians.org/modes/> .
@prefix zz2h: <http://zz2h.zazukoians.org/ontology/> .
@prefix dbr:	<http://dbpedia.org/resource/> .

<page> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate s:headline;
  ];
  r2h:template [
    r2h:context zzm:FullPage;
    r2h:mustache '''
    <head>
      <title>{{s:headline}}</title>
    </head>
    <body>
        {{{:continue}}}
    </body>
'''
  ];
  r2h:before <genericFrame>.

<genericFrame> a r2h:Matcher ;
  r2h:template [
    r2h:context zzm:FullPage;
    r2h:mustache '''{{{@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#>}}}
    <head>
      <link rel="stylesheet" href="/css/bootstrap.css" />
      <link rel="stylesheet" href="/css/custom.css" />
      <script src="/js/sticky.js"></script>
      <title>Resource {{.}}</title>
    </head>
    <body>
        {{{:render . r2h:Default}}}
    </body>
'''
  ];
r2h:before <title>.

<title> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate dc:title;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''<h2>{{dc:title}}</h2>
        {{{:continue}}}'''
  ];
  r2h:before <label>.

<main> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''
      <div id="sticky-anchor"></div>
      <div id="sticky" class="list-group" style="width: 100%;">
        <span class="list-group-item">
          <h4 class="list-group-item-heading">Resource: {{.}}</h4>
          <p class="list-group-item-text">a {{#rdf:type}}<a href="{{.}}">{{.}}</a> {{/rdf:type}}</p>
        </span>
      </div>
         {{{:continue}}}'''
  ];
  r2h:before <matcherEdit>.

<headline> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate s:headline;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''<h1>{{s:headline}}</h1>
         {{{:continue}}}'''
  ];
  r2h:before <matcherEdit>.

<matcherEdit> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate zz2h:matcherGraph;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''{{{@prefix zz2h: <http://zz2h.zazukoians.org/ontology/>}}}
         <div id="matcherEditor"></div>
         <script id="editorLoader">
             var store = new rdf.LdpStore({parsers: {
                            'text/turtle': rdf.parseTurtle }
                        });
             store.match("{{{zz2h:matcherGraph}}}",
                                null,
                                null,
                                null,
                                function (data, error) {
                                    if (!data) {
                                        console.warn("Couldn't get any triple. reason: "+error);
                                        return;
                                    }
                                    console.log("Got graph of size "+data.length);
                                    var editors = new Object();
                                    editors["turtle"] = function() {
                                        //debugger;
                                        var html = '&lt;textarea id="matcherGraph">&lt;/textarea>';
                                        $("#matcherEditor").html(html);
                                        rdf.serializeTurtle(data, function(turtle) {
                                            $("#matcherGraph").val(turtle);
                                        });
                                    };
                                    editors["turtle"]();
                                    //debugger;
                                });
             /*$.ajax({
                url : "{{{zz2h:matcherGraph}}}",
                dataType: "text",
                success : function (data) {
                    rdf.parseTurtle(data, function (data) {
                        console.log(data.toString());
                        callback(data);
                    }, window.location.toString().split('#')[0]);
                    $("#matcherGraph").val(data);
                }
            });*/
         </script>
         {{{:continue}}}
    '''
  ];
  r2h:before <catchall>.

<name> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate foaf:name;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''Name: {{foaf:name}}<br/>
         {{{:continue}}}'''
  ];
  r2h:before <label>.

<address> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate s:address;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''Address: {{{:render s:address}}}<br/>
         {{{:continue}}}'''
  ];
  r2h:before <label>.

<caps> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''<div id="header"><img src="/img/admin-logo.png" height="70px" align="left" vspace="15" hspace="10"><p align="right"><h2 align="right">data.admin.ch</h2></p><p align="right">
Linked Data Pilot</p></div>
        {{{:continue}}}<div id="footer">
            <table align="center" width="30%">
              <tr>
                <td colspan="2">Powered by</td>
              </tr>
              <tr>
                <td><a href="http://zazuko.com"><img src="/img/zazuko-logo.png" width="150px"></a></td>
                <td><a href="http://synapta.it"><img src="/img/synapta-logo.svg" width="150px"></a></td>
              </tr>
            </table>
            <br>
            Code on <a href="https://github.com/zazukoians/trifid-ld" style="color:white"><b>github</b></a>
        </div>'''
  ];
  r2h:before <catchall>.

<catchall> a r2h:Matcher ;
  r2h:template [
    r2h:context r2h:Default;
    r2h:javaScript '''function(n) {
        //alert(n.graph);
        //alert(n.node);

        var prefixes = [{url: "http://schema.org/", shortcut: "s:"},
                        {url: "http://www.w3.org/1999/02/22-rdf-syntax-ns#", shortcut: "rdf:"},
                        {url: "https://gont.ch/", shortcut: "gont:"},
                        {url: "http://www.w3.org/2004/02/skos/core#", shortcut: "skos:"},
                        {url: "http://www.w3.org/2002/07/owl#", shortcut: "owl:"},
                        {url: "http://dbpedia.org/resource/", shortcut: "dbr:"},
                        {url: "http://dbpedia.org/class/yago/", shortcut: "yago:"},
                        {url: "http://xmlns.com/foaf/0.1/", shortcut: "foaf:"},
                        {url: "http://www.wikidata.org/entity/", shortcut: "wikidata:"},
                        {url: "http://dbpedia.org/ontology/", shortcut: "dbo:"},
                        {url: "http://purl.org/dc/terms/", shortcut: "dct:"},
                        {url: "http://www.w3.org/2000/01/rdf-schema#", shortcut: "rdfs:"}];
        var result = "";
        var first = 0;
        var firstDash = -1;
        var predicatesArray = [];
        var blankBack = [];

        var dbpediaGraph = [];

        for (var i = n.graph["_graph"].length -1; i >= 0; i--) {
            if (n.graph["_graph"][i]["subject"]["nominalValue"].match(/dbpedia.org/) !== null) {
                dbpediaGraph.push(n.graph["_graph"][i]);
                n.graph["_graph"].splice(i, 1);
            }
        }

        var nodesToRender = [];
        var renderedNodesToId = new Object();
        nodesToRender.push(n.node);
        while (nodesToRender.length > 0) {
           var node = nodesToRender.pop();
           var s = n.graph.filter(function(t) {return t.subject.equals(node)}).toArray();
           if (s.length === 0) continue;
           if (renderedNodesToId[node.toString()]) continue;
           renderedNodesToId[node.toString()] = true;
           if (first > 0) {
               result += '<hr class="baffone">';
               result += '<div align="center">'+blankBack[first-1]+'</div>';
           }
           result += '<div class="container" id="'+node+'"><table id="tt" width="100%">';
           first++;
           s.forEach(function(t) {
            var objectHtml;

            var prefix = "";
            var predicate = t.predicate.toString();
            var link = predicate;
            prefixes.forEach(function(p) {
                var predicateHtml = predicate.split(p.url);
                if (predicateHtml[0] === "") {
                    prefix = p.shortcut;
                    predicate = predicateHtml[1];
                }
            });

            if ((t.object.interfaceName != "Literal") && (!renderedNodesToId[t.object.toString()])) {
                nodesToRender.push(t.object);
                if (t.object.interfaceName == "BlankNode") {
                    objectHtml = '<div id="blank' + first + '" class="moving"></div><a onclick=\\'$("#'+t.object+'")[0].scrollIntoView( true );\\'>'+t.object+'</a>';
                    returnObjectLink = '<a onclick=\\'$("#blank' + first + '")[0].scrollIntoView( true );\\'>'+t.object+'</a>';
                    blankBack.push('<table width="30%"><tr><td>'+prefix+'<b>'+predicate+'</b></td><td>'+returnObjectLink+'</td></tr></table><br>');
                } else {
                    var objectPrefix = "";
                    var object = t.object.toString().replace(/&/g,"&amp;");
                    var objectLink = object;
                    prefixes.forEach(function(p) {
                        var objectSplit = object.split(p.url);
                        if (objectSplit[0] === "") {
                            objectPrefix = p.shortcut;
                            object = objectSplit[1];
                        }
                    });
                    if (objectPrefix === "") {
                        objectHtml = '<a href="'+objectLink+'" title="'+objectLink+'">'+object+'</a>';
                    } else {
                        objectHtml = '<a href="'+objectLink+'" title="'+objectLink+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none">'+objectPrefix+'<b>'+object+'</b></a>';
                    }
                }

            } else {
                objectHtml = t.object;
            }

            var isNew = 1;
            for (var i = 0; i < predicatesArray.length; i++) {
                if (predicatesArray[i] === predicate) {
                    isNew = 0;
                    break;
                }
            }

            predicatesArray.push(predicate);
            if (isNew) {
                if (firstDash === 0) {
                    result = result.substring(0, result.length - 24); //XXX
                    result += '<hr /></td>'
                }
                result += '<tr><td width="35%" cellpadding=".1em" valign="top" id="sticky"><a href="'+link+'" title="'+link+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none">'+prefix+'<b>'+predicate+'</b></a></td><td width="65%" cellpadding=".1em">'+objectHtml+'<hr /></td>';
                firstDash = 1;
            } else {
                if (firstDash === 1) {
                    result = result.substring(0, result.length - 11); //XXX
                    result += '<hr class="dashed"></td>';
                    firstDash = 0;
                }
                result += '<tr><td width="35%"></td><td width="65%" cellpadding=".1em">'+objectHtml+'<hr class="dashed"></td>';
            }
            });
           result += '</table></div>';
        };

        if (dbpediaGraph.length > 0) {
            var dbSubject = dbpediaGraph[0]["subject"]["nominalValue"];
            result += '<div class="LOD">DBpedia LOD enrichment with <a href="' + dbSubject + '">dbr:' + dbSubject.replace("http://dbpedia.org/resource/","") + '</a></div>';
            result += '<div class="container" id="dbpedia"><table id="tt-dbpedia" width="100%">';

            predicatesArray = [];
            firstDash = -1;
            for (var j = 0; j < dbpediaGraph.length; j++) {
                var dbPredicate = dbpediaGraph[j]["predicate"]["nominalValue"];
                var dbObject = dbpediaGraph[j]["object"]["nominalValue"];

                /* remove unwanted predicate */
                if (dbPredicate === "http://purl.org/voc/vrank#hasRank")
                    continue;

                /* predicate compact URI */
                var prefix = "";
                var link = dbPredicate;
                prefixes.forEach(function(p) {
                    var predicateHtml = dbPredicate.split(p.url);
                    if (predicateHtml[0] === "") {
                        prefix = p.shortcut;
                        dbPredicate = predicateHtml[1];
                    }
                });

                /* object compact URI */
                if (dbpediaGraph[j]["object"]["interfaceName"] !== "Literal") {
                    var objectPrefix = "";
                    var objectLink = dbObject;
                    prefixes.forEach(function(p) {
                        var objectSplit = dbObject.split(p.url);
                        if (objectSplit[0] === "") {
                            objectPrefix = p.shortcut;
                            dbObject = objectSplit[1];
                        }
                    });
                    if (objectPrefix === "") {
                        objectHtml = '<a href="'+objectLink+'" title="'+objectLink+'">'+dbObject+'</a>';
                    } else {
                        objectHtml = '<a href="'+objectLink+'" title="'+objectLink+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none">'+objectPrefix+'<b>'+dbObject+'</b></a>';
                    }
                } else {
                    objectHtml = dbObject;
                }

                /* predicate group by */
                var isNew = 1;
                for (var i = 0; i < predicatesArray.length; i++) {
                    if (predicatesArray[i] === dbPredicate) {
                        isNew = 0;
                        break;
                    }
                }
                predicatesArray.push(dbPredicate);

                /* writing table */
                if (isNew) {
                    if (firstDash === 0) {
                        result = result.substring(0, result.length - 24); //XXX
                        result += '<hr /></td>';
                    }
                    result += '<tr><td width="35%" cellpadding=".1em" valign="top" id="sticky"><a href="'+link+'" title="'+link+'" style="background-color:#FFFFFF;color:#000000;text-decoration:none">'+prefix+'<b>'+dbPredicate+'</b></a></td><td width="65%" cellpadding=".1em">'+objectHtml+'<hr /></td>';
                    firstDash = 1;
                } else {
                    if (firstDash === 1) {
                        result = result.substring(0, result.length - 11); //XXX
                        result += '<hr class="dashed"></td>'
                        firstDash = 0;
                    }
                    result += '<tr><td width="35%"></td><td width="65%" cellpadding=".1em">'+objectHtml+'<hr class="dashed"></td>';
                }
            }
            result += '</table></div>';
        }

        return result;
    }'''
  ].
